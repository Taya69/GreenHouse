import db from '../database.js';
import { getOrderStatusText } from '../utils/helpers.js';
import { getUserOrderStatusKeyboard, getUserOrderKeyboard } from '../keyboards/orders.js';
import config from '../config.js';

export async function showUserOrders(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const orders = db.getUserOrders(user.id);

        if (orders.length === 0) {
            await ctx.reply('üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        await ctx.reply('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', {
            reply_markup: getUserOrderStatusKeyboard()
        });
    } catch (error) {
        console.error('Error showing orders:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤');
    }
}

export async function showUserOrdersByStatus(ctx, status) {
    try {
        const user = db.getUser(ctx.from.id);
        let orders = db.getUserOrders(user.id);
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ "–≤—Å–µ"
        if (status !== 'all') {
            orders = orders.filter(order => order.status === status);
        }

        if (orders.length === 0) {
            const statusText = status === 'all' ? '–∑–∞–∫–∞–∑–æ–≤' : getOrderStatusText(status).toLowerCase();
            await ctx.reply(`üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç ${statusText}`);
            return;
        }

        for (const order of orders) {
            const orderDetails = db.getOrderDetails(order.id);
            
            let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.user_order_number}*\n`;
            message += `üíµ –°—É–º–º–∞: ${order.total_amount} —Ä—É–±.\n`;
            message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n`;
            message += `üìä –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n`;
            
            if (order.user_comment) {
                message += `üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.user_comment}\n`;
            }
            
            if (order.admin_comment) {
                message += `üëë –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${order.admin_comment}\n`;
            }
            
            message += '\n*–¢–æ–≤–∞—Ä—ã:*\n';

            orderDetails.forEach((item, index) => {
                message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
            });

            await ctx.reply(message, { 
                parse_mode: 'Markdown',
                reply_markup: getUserOrderKeyboard(order.id, order.status)
            });
        }
    } catch (error) {
        console.error('Error showing orders by status:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤');
    }
}

export async function handleUserOrderStatusFilter(ctx) {
    try {
        const status = ctx.callbackQuery.data.split(':')[1];
        await ctx.answerCallbackQuery();
        await showUserOrdersByStatus(ctx, status);
    } catch (error) {
        console.error('Error handling user order status filter:', error);
        await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

export async function handleUserCancelOrder(ctx) {
    try {
        const orderId = parseInt(ctx.callbackQuery.data.split(':')[1]);
        const user = db.getUser(ctx.from.id);
        const order = db.getOrderById(orderId);
        
        if (!order) {
            await ctx.answerCallbackQuery('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (order.user_id !== user.id) {
            await ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
        if (order.status !== 'created' && order.status !== 'accepted') {
            await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ—Ç–º–µ–Ω—ë–Ω"
        db.updateOrderStatus(orderId, 'cancelled', '–û—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        
        await ctx.answerCallbackQuery('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await notifyAdminAboutOrderCancellation(ctx, order, user);
        
    } catch (error) {
        console.error('Error cancelling order:', error);
        await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞');
    }
}

async function notifyAdminAboutOrderCancellation(ctx, order, user) {
    try {        
        const orderDetails = db.getOrderDetails(order.id);
        
        let message = `üö® *–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–¢–ú–ï–ù–ï –ó–ê–ö–ê–ó–ê*\n\n`;
        message += `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*  (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π #${order.user_order_number}) –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n`;
        message += `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.first_name} ${user.last_name || ''}\n`;
        message += `üì± *Telegram ID:* ${user.telegram_id}\n`;
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üíµ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.total_amount} —Ä—É–±.\n`;
        message += `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${new Date(order.created_at).toLocaleString()}\n`;
        message += `üìÖ *–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã:* ${new Date().toLocaleString()}\n\n`;
        
        message += `*–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:*\n`;
        orderDetails.forEach((item, index) => {
            message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for (const adminId of config.ADMIN_IDS) {
            try {
            await ctx.api.sendMessage(
                adminId,
                message
            );
            } catch (error) {
                console.error(`Failed to notify admin ${adminId}:`, error);
            }
        }
    } catch (error) {
        console.error('Error notifying admin about order cancellation:', error);
    }
}