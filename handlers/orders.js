import db from '../database.js';

export async function showUserOrders(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const orders = db.getUserOrders(user.id);

        if (orders.length === 0) {
            await ctx.reply('üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
            return;
        }

        for (const order of orders) {
            const orderDetails = db.getOrderDetails(order.id);
            
            let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\n`;
            message += `üíµ –°—É–º–º–∞: ${order.total_amount} —Ä—É–±.\n`;
            message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n`;
            message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
            
            if (order.user_comment) {
                message += `üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.user_comment}\n`;
            }
            
            if (order.admin_comment) {
                message += `üëë –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${order.admin_comment}\n`;
            }
            
            message += '\n*–¢–æ–≤–∞—Ä—ã:*\n';

            orderDetails.forEach((item, index) => {
                message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
            });

            await ctx.reply(message, { parse_mode: 'Markdown' });
        }
    } catch (error) {
        console.error('Error showing orders:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤');
    }
}