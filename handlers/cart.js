import db from '../database.js';
import { getCartKeyboard } from '../keyboards/cart.js';
import { getMainKeyboard } from '../keyboards/main.js';
import { showCatalog } from './catalog.js';

export async function showCart(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const cartItems = db.getCart(user.id);

        if (cartItems.length === 0) {
            await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        let total = 0;
        let message = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';

        for (const item of cartItems) {
            const itemTotal = item.price * item.quantity;
            total += itemTotal;
            message += `üéÅ ${item.name}\n`;
            message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
            message += `   –¶–µ–Ω–∞: ${itemTotal} —Ä—É–±.\n\n`;
        }

        message += `üíµ *–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.*`;

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: getCartKeyboard(cartItems)
        });
    } catch (error) {
        console.error('Error showing cart:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
}

export async function handleRemoveFromCart(ctx) {
    try {
        const productId = ctx.callbackQuery.data.split(':')[1];
        const user = db.getUser(ctx.from.id);
        
        await db.removeFromCart(user.id, parseInt(productId));
        await ctx.answerCallbackQuery('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await ctx.deleteMessage();
        await showCart(ctx);
    } catch (error) {
        console.error('Error removing from cart:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

export async function handleClearCart(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        await db.clearCart(user.id);
        await ctx.answerCallbackQuery('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
        await ctx.deleteMessage();
        await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞');
    } catch (error) {
        console.error('Error clearing cart:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
}

export async function handleCheckout(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const cartItems = db.getCart(user.id);
        const contactInfo = db.getUserContactInfo(user.telegram_id);
        
        if (!contactInfo || !contactInfo.phone || !contactInfo.full_name) {
            await ctx.reply('üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.');
            await ctx.conversation.enter('getContactInfo');
        } else {
            // await createOrder(ctx, user.id, cartItems);
        }
    } catch (error) {
        console.error('Error during checkout:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
}

async function createOrder(ctx, userId, cartItems) {
    const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    await ctx.reply('üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? (–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç")');
    
    const commentCtx = await ctx.conversation.wait('message:text');
    const userComment = commentCtx.message.text.toLowerCase() === '–Ω–µ—Ç' ? '' : commentCtx.message.text;
    
    try {
        const orderId = db.createOrder(userId, cartItems, totalAmount, userComment);
        await db.clearCart(userId);
        
        await ctx.reply(
            `‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n` +
            `üíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n` +
            `üìä –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω`
        );
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for (const adminId of config.ADMIN_IDS) {
            await ctx.api.sendMessage(
                adminId,
                `üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}\nüíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\nüë§ –ö–ª–∏–µ–Ω—Ç: ${ctx.from.first_name}`
            );
        }
    } catch (error) {
        console.error('Error creating order:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
}