import db from '../database.js';
import { getCartKeyboard } from '../keyboards/cart.js';
import { getMainKeyboard } from '../keyboards/main.js';
import { handleAddToCart, showCatalog } from './catalog.js';

export async function showCart(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const cartItems = db.getCart(user.id);

        if (cartItems.length === 0) {
            await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        let total = 0;
        let message = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';

        for (const item of cartItems) {
            const itemTotal = item.price * item.quantity;
            total += itemTotal;
            message += `üéÅ ${item.name}\n`;
            message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
            message += `   –¶–µ–Ω–∞: ${itemTotal} —Ä—É–±.\n\n`;
        }

        message += `üíµ *–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.*`;

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: getCartKeyboard(cartItems)
        });
    } catch (error) {
        console.error('Error showing cart:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
}

export async function handleRemoveFromCart(ctx) {
    try {
        const productId = ctx.callbackQuery.data.split(':')[1];
        const user = db.getUser(ctx.from.id);
        
        await db.removeFromCart(user.id, parseInt(productId));
        await ctx.answerCallbackQuery('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');        

    } catch (error) {
        console.error('Error removing from cart:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

export async function handleClearCart(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        await db.clearCart(user.id);
        await ctx.answerCallbackQuery('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
        await ctx.deleteMessage();
        await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞');
    } catch (error) {
        console.error('Error clearing cart:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
}

export async function handleCartIncrease(ctx) {
    try {
        const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
        const user = db.getUser(ctx.from.id);
        const product = db.getProductById(productId);
        
        if (!product) {
            await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }

        const cartItem = db.getCartItem(user.id, productId);
        
        if (!cartItem) {
            handleAddToCart(ctx);
            // updateCartMessage(ctx);
            // await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
            return true;
        } else {
            if (cartItem.quantity >= product.stock) {
                await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ');
                return false;
            }
    
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const newQuantity = cartItem.quantity + 1;
            db.updateCartQuantity(user.id, productId, newQuantity);
            
            await ctx.answerCallbackQuery(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ ${newQuantity} —à—Ç.`);
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
       
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        // await ctx.deleteMessage();
        // await showCart(ctx);
    } catch (error) {
        console.error('Error increasing cart quantity:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
        return false;
    }
    
}

export async function handleCartIncreaseInCart(ctx) {
   if (await handleCartIncrease(ctx)) {
    updateCartMessage(ctx);
   }
}

export async function handleCartIncreaseInProduct(ctx) {
    handleCartIncrease(ctx);    
}

export async function handleCartDecrease(ctx) {
    try {
        const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
        const user = db.getUser(ctx.from.id);
        
        const cartItem = db.getCartItem(user.id, productId);
        
        if (!cartItem) {
            await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
            return false;
        }

        if (cartItem.quantity <= 1) {
            handleRemoveFromCart(ctx);
            // updateCartMessage(ctx);
            //await ctx.answerCallbackQuery('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 —à—Ç.');
            return true;
        }

        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const newQuantity = cartItem.quantity - 1;
        db.updateCartQuantity(user.id, productId, newQuantity);
        
        await ctx.answerCallbackQuery(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ ${newQuantity} —à—Ç.`);
        return true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        // await ctx.deleteMessage();
        // await showCart(ctx);
    } catch (error) {
        console.error('Error decreasing cart quantity:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
        return false;
    }
}

export async function handleCartDecreaseInCart(ctx) {
    if (await handleCartDecrease(ctx)) {
        updateCartMessage(ctx);
    }    
}

export async function handleCartDecreaseInProduct(ctx) {
    handleCartDecrease(ctx);
}

export async function handleCheckout(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const cartItems = db.getCart(user.id);
        const contactInfo = db.getUserContactInfo(user.telegram_id);
        
        if (!contactInfo || !contactInfo.phone || !contactInfo.full_name) {
            await ctx.reply('üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.');
            await ctx.conversation.enter('getContactInfo');
        } else {
            await ctx.conversation.enter('checkoutFromCart');
        }
    } catch (error) {
        console.error('Error during checkout:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
}

async function updateCartMessage(ctx) {
    try {
        const user = db.getUser(ctx.from.id);
        const cartItems = db.getCart(user.id);

        if (cartItems.length === 0) {
            await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        let total = 0;
        let message = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';

        for (const item of cartItems) {
            const itemTotal = item.price * item.quantity;
            total += itemTotal;
            message += `üéÅ ${item.name}\n`;
            message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
            message += `   –¶–µ–Ω–∞: ${itemTotal} —Ä—É–±.\n\n`;
        }

        message += `üíµ *–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.*`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: getCartKeyboard(cartItems)
            });
        // }
    } catch (error) {
        console.error('Error updating cart message:', error);
    }
}