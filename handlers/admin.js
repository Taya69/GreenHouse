import db from '../database.js';
import { getAdminKeyboard, getOrdersKeyboard, getOrderActionsKeyboard, getOrderStatusKeyboard } from '../keyboards/admin.js';
import { getMainKeyboard } from '../keyboards/main.js';
import config from '../config.js';
import { isAdmin } from '../utils/helpers.js';

export async function showAdminPanel(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await ctx.reply('üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*', {
        parse_mode: 'Markdown',
        reply_markup: getAdminKeyboard()
    });
}

export async function showAdminStats(ctx) {
    const stats = db.getOrderStats();
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:*\n\n';
    
    let totalOrders = 0;
    let totalRevenue = 0;
    
    stats.forEach(stat => {
        totalOrders += stat.status_count;
        if (stat.status === config.ORDER_STATUSES.COMPLETED) {
            totalRevenue += stat.total_revenue || 0;
        }
        message += `üì¶ ${stat.status}: ${stat.status_count} –∑–∞–∫–∞–∑–æ–≤\n`;
    });
    
    message += `\nüíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue} —Ä—É–±.\n`;
    message += `üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${totalRevenue > 0 ? (totalRevenue / totalOrders).toFixed(2) : 0} —Ä—É–±.\n`;
    message += `üë• –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                reply_markup: getAdminKeyboard()
        });
}

export async function showAllOrders(ctx) {
    const orders = db.getAllOrders();
    
    if (orders.length === 0) {
        await ctx.reply('üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                reply_markup: getAdminKeyboard()
        });
        return;
    }

    for (const order of orders.slice(0, 10)) {
        const orderDetails = db.getOrderDetails(order.id);
        
        let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\n`;
        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.first_name} (@${order.username || '–Ω–µ—Ç'})\n`;
        message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üíµ –°—É–º–º–∞: ${order.total_amount} —Ä—É–±.\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        
        if (order.user_comment) {
            message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: ${order.user_comment}\n`;
        }
        
        if (order.admin_comment) {
            message += `üëë –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.admin_comment}\n`;
        }
        
        message += '\n*–¢–æ–≤–∞—Ä—ã:*\n';

        orderDetails.forEach((item, index) => {
            message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
        });  
        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: getOrderActionsKeyboard(order.id)
        });  
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                reply_markup: getAdminKeyboard()
        });
    }
}

export async function handleOrderStatusChange(ctx) {
    const [_, orderId, status] = ctx.callbackQuery.data.split(':');
    
    ctx.session.editingOrder = { 
        orderId: parseInt(orderId), 
        status: getStatusFromKey(status) 
    };
    
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${getStatusFromKey(status)}":`);
    await ctx.conversation.enter('updateOrderStatus');
}

function getStatusFromKey(key) {
    const statusMap = {
        'created': config.ORDER_STATUSES.CREATED,
        'accepted': config.ORDER_STATUSES.ACCEPTED,
        'completed': config.ORDER_STATUSES.COMPLETED,
        'rejected': config.ORDER_STATUSES.REJECTED
    };
    return statusMap[key] || key;
}

export async function showAdminProducts(ctx) {
    const products = db.getProducts();

    if (products.length === 0) {
        await ctx.reply('üòî –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
        return;
    }

    let message = 'üóëÔ∏è *–¢–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n';
    
    for (const product of products) {
        message += `üéÅ ${product.name} - ${product.price} —Ä—É–±. (ID: ${product.id})\n`;
    }

    message += '\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_product [ID]';

    await ctx.reply(message);
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                reply_markup: getAdminKeyboard()
        });
}

export async function handleAddProduct(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    await ctx.conversation.enter('addProduct');
}

export async function handleAddProductCategory(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    console.log('handleAddProductCategory');
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    await ctx.conversation.enter('addProductCategory');
}

export async function handleDeleteProduct(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    const productId = ctx.message.text.split(' ')[1];
    
    if (!productId) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: /delete_product [ID]');
        return;
    }

    try {
        const result = db.deleteProduct(parseInt(productId));
        if (result > 0) {
            await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        } else {
            await ctx.reply('‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('Error deleting product:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}