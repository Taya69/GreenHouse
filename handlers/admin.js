import db from '../database.js';
import { getAdminKeyboard, getOrdersKeyboard, getOrderStatusKeyboard } from '../keyboards/admin.js';
import { getAdminProductKeyboard } from '../keyboards/catalog.js';
import { getCategoryManagementKeyboard, getCategoriesManagementKeyboard } from '../keyboards/categories.js';
import { getMainKeyboard } from '../keyboards/main.js';
import config from '../config.js';
import { isAdmin, getOrderStatusText } from '../utils/helpers.js';
import { escapeMarkdown } from '../utils/markdown.js';
import { resizeImageFromUrl } from '../utils/image.js';
import { InlineKeyboard } from 'grammy';
import { getUserOrderStatusKeyboard } from '../keyboards/orders.js';

export async function showAdminPanel(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await ctx.reply('üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*', {
        parse_mode: 'Markdown',
        reply_markup: getAdminKeyboard()
    });
}

export async function showAdminStats(ctx) {
    const stats = db.getOrderStats();
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:*\n\n';
    
    let totalOrders = 0;
    let totalRevenue = 0;
    
    stats.forEach(stat => {
        totalOrders += stat.status_count;
        
        if (stat.status === 'completed') {
            totalRevenue += stat.total_revenue || 0;
        }
        message += `üì¶ ${stat.status}: ${stat.status_count} –∑–∞–∫–∞–∑–æ–≤\n`;
    });
    
    message += `\nüíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue} —Ä—É–±.\n`;
    message += `üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${totalRevenue > 0 ? (totalRevenue / totalOrders).toFixed(2) : 0} —Ä—É–±.\n`;
    message += `üë• –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
}

export async function showAllOrders(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    const orders = db.getAllOrders();
    
    if (orders.length === 0) {
        await ctx.reply('üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
    }

    for (const order of orders.slice(0, 10)) {
        const orderDetails = db.getOrderDetails(order.id);
        
        let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}* (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π #${order.user_order_number})\n`;
        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.first_name} (@${order.username || '–Ω–µ—Ç'})\n`;
        message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üíµ –°—É–º–º–∞: ${order.total_amount} —Ä—É–±.\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n`;
        
        if (order.user_comment) {
            message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: ${order.user_comment}\n`;
        }
        
        if (order.admin_comment) {
            message += `üëë –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.admin_comment}\n`;
        }
        
        message += '\n*–¢–æ–≤–∞—Ä—ã:*\n';

        orderDetails.forEach((item, index) => {
            message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
        });
        message = escapeMarkdown(message);  
        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: getOrderStatusKeyboard(order.id)
        });  
    }
}

export async function showAdminOrdersByStatus(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    // const keyboard = new InlineKeyboard()
    // .text('üîé –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É', async (ctx) => {
        const kb = InlineKeyboard.from([
            [
                InlineKeyboard.text('üìù –°–æ–∑–¥–∞–Ω', 'admin_filter_status:created'),
                InlineKeyboard.text('‚úÖ –ü—Ä–∏–Ω—è—Ç', 'admin_filter_status:accepted')
            ],
            [
                InlineKeyboard.text('üöö –ò—Å–ø–æ–ª–Ω–µ–Ω', 'admin_filter_status:completed'),
                InlineKeyboard.text('‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω', 'admin_filter_status:rejected')
            ],
            [
                InlineKeyboard.text('‚ùå –û—Ç–º–µ–Ω—ë–Ω', 'admin_filter_status:cancelled')
            ]
        ]);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', { reply_markup: kb });
    // }) 
    // await ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å', {
    //     parse_mode: 'Markdown',
    //     reply_markup: keyboard
    // });  
    
}

export async function showOrdersByStatus(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    const status = ctx.match?.[1] || ctx.session.filterStatus;
    if (!status) {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤:', {
            reply_markup: getOrderStatusKeyboard(0)
        });
        return;
    }
    const orders = db.getOrdersByStatus(status);
    if (orders.length === 0) {
        await ctx.reply('üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º');
        return;
    }
    for (const order of orders.slice(0, 10)) {
        const orderDetails = db.getOrderDetails(order.id);
        let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}* (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π #${order.user_order_number})\n`;
        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.first_name} (@${order.username || '–Ω–µ—Ç'})\n`;
        message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `üíµ –°—É–º–º–∞: ${order.total_amount} —Ä—É–±.\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleDateString()}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n`;
        message += `üìä –ö–æ–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${order.admin_comment}\n`;
        message += `üìä –ö–æ–æ–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${order.user_comment}\n`;
        message += '\n*–¢–æ–≤–∞—Ä—ã:*\n';
        orderDetails.forEach((item, index) => {
            message += `${index + 1}. ${item.name} - ${item.quantity} —à—Ç. x ${item.price} —Ä—É–±.\n`;
        });
        message = escapeMarkdown(message); 
        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: getOrderStatusKeyboard(order.id)
        });
    }
}

export async function handleOrderStatusChange(ctx) {
    const [_, orderId, status] = ctx.callbackQuery.data.split(':');
    
    ctx.session.editingOrder = { 
        orderId: parseInt(orderId), 
        status: getOrderStatusText(status) 
    };
    
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${getOrderStatusText(status)}":`);
    await ctx.conversation.enter('updateOrderStatus');
}

export async function handleAddProduct(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    await ctx.conversation.enter('addProduct');
}

export async function handleAddProductCategory(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    console.log('handleAddProductCategory');
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    await ctx.conversation.enter('addProductCategory');
}

export async function handleAddCategory(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    await ctx.reply('‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
        parse_mode: 'Markdown'
    });
    await ctx.conversation.enter('addProductCategory');
}

export async function showAdminCategories(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    const categories = db.getProductCategories();
    if (!categories || categories.length === 0) {
        await ctx.reply('üòî –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π', {
            reply_markup: getCategoriesManagementKeyboard()
        });
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await ctx.reply('üìÇ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        parse_mode: 'Markdown',
        reply_markup: getCategoriesManagementKeyboard()
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    for (const category of categories) {
        const message = `üìÇ *${category.name}*\nID: ${category.id}`;
        const keyboard = getCategoryManagementKeyboard(category.id);
        
        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
}

export async function handleInlineEditCategory(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    const categoryId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    const category = db.getProductCategoryById(categoryId);
    
    if (!category) {
        await ctx.answerCallbackQuery('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    ctx.session.editingCategoryId = categoryId;
    await ctx.answerCallbackQuery('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    await ctx.reply(`‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *${category.name}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, {
        parse_mode: 'Markdown'
    });
    await ctx.conversation.enter('editCategory');
}

export async function handleInlineDeleteCategory(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    const categoryId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    const category = db.getProductCategoryById(categoryId);
    
    if (!category) {
        await ctx.answerCallbackQuery('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const products = db.getProductsAny(categoryId);
        if (products && products.length > 0) {
            await ctx.answerCallbackQuery('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏');
            return;
        }
        
        const res = db.deleteProductCategory(categoryId);
        if (res > 0) {
            await ctx.answerCallbackQuery('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
            await ctx.editMessageText(`üóëÔ∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —É–¥–∞–ª–µ–Ω–∞*`, {
                parse_mode: 'Markdown'
            });
        } else {
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (e) {
        console.error('Error deleting category:', e);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
}

export async function handleInlineDeleteProduct(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    try {
        const result = db.deleteProduct(productId);
        if (result > 0) {
            await ctx.answerCallbackQuery('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');
            await ctx.deleteMessage();
        } else {
            await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('Error inline deleting product:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
}

export async function handleInlineEditProduct(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    console.log('handleInlineEditProduct', productId);
    // Persist product id into both ctx.session and conversation.session for reliability
    ctx.session.editingProductId = productId;
    await ctx.answerCallbackQuery('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    await ctx.conversation.enter('editProduct');
}

export async function handleIncreaseStock(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    
    const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    const product = db.getProductById(productId);
    
    if (!product) {
        await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const newStock = product.stock + 1;
    const result = db.updateProductStock(productId, newStock);
    
    if (result > 0) {
        await ctx.answerCallbackQuery(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ ${newStock} —à—Ç.`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        await updateProductMessage(ctx, productId);
    } else {
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
}

export async function handleDecreaseStock(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }
    
    const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    const product = db.getProductById(productId);
    
    if (!product) {
        await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (product.stock <= 0) {
        await ctx.answerCallbackQuery('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º');
        return;
    }
    
    const newStock = product.stock - 1;
    const result = db.updateProductStock(productId, newStock);
    
    if (result > 0) {
        await ctx.answerCallbackQuery(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ ${newStock} —à—Ç.`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        await updateProductMessage(ctx, productId);
    } else {
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
}

async function updateProductMessage(ctx, productId) {
    try {
        const product = db.getProductById(productId);
        if (!product) return;
        
        let message = `üéÅ *${product.name}*\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${product.price} —Ä—É–±.\n`;
        message += `üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;
        if (product.category_name) {
            message += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_name}\n`;
        }
        message += `üìù ${product.description}\n\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
        const categoryId = product.category_id;
        
        const keyboard = getAdminProductKeyboard(product, product.is_available);
        
        // if (product.image_url) {
        //     try {
        //         const resizedPath = await resizeImageFromUrl(product.image_url, 320);
        //         await ctx.editMessageCaption(message, {
        //             parse_mode: 'Markdown',
        //             reply_markup: keyboard
        //         });
        //         await safeUnlink(resizedPath);
        //     } catch (e) {
        //         console.error('Image resize failed, updating original:', e);
        //         await ctx.editMessageCaption(message, {
        //             parse_mode: 'Markdown',
        //             reply_markup: keyboard
        //         });
        //     }
        // } else {
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        // }
    } catch (error) {
        console.error('Error updating product message:', error);
    }
}

export async function showUsers(ctx) {
    try {
        const users = db.getUsers();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        for (const user of users) {
            let message = `üìÇ ${user.full_name} (ID: ${user.id}) (tgID: ${user.telegram_id}) ${user.phone}`
            message += `\n${user.username}\n`;
            await ctx.reply(message);
        }
    } catch (error) {
        console.error('Error showing users:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

export async function toggleProductAvailability(ctx) {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        return;
    }
    

    try {
        const productId = parseInt(ctx.callbackQuery.data.split(':')[1]);
        const product = db.getProductById(productId);
        
        if (!product) {
            await ctx.answerCallbackQuery('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        const newAvailability = !product.is_available;
        db.toggleProductAvailability(productId, newAvailability);
        
        const statusText = newAvailability ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '—Å–∫—Ä—ã—Ç';
        const emoji = newAvailability ? '‚úÖ' : '‚ùå';
        
        await ctx.answerCallbackQuery(`${emoji} –¢–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å ${statusText}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            await ctx.editMessageReplyMarkup({
                reply_markup: getAdminProductKeyboard(product, newAvailability)
            });
        } catch (editError) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            console.log('Could not update message markup');
        }
        
    } catch (error) {
        console.error('Error toggling product availability:', error);
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
}