import db from '../database.js';
import config from '../config.js';
import { getCategoriesInlineKeyboard } from '../keyboards/categories.js';

function isCancelText(text) {
    if (!text) return false;
    const t = text.trim().toLowerCase();
    return t === '–æ—Ç–º–µ–Ω–∞' || t === 'cancel' || t === '—Å—Ç–æ–ø';
}

export async function addProduct(conversation, ctx) {
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const name = await conversation.wait();
    if (name.message && isCancelText(name.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const description = await conversation.wait();
    if (description.message && isCancelText(description.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    
    await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const priceMsg = await conversation.wait();
    if (priceMsg.message && isCancelText(priceMsg.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    const price = parseFloat(priceMsg.message.text);
    
    if (isNaN(price)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)');
        return;
    }

    await ctx.reply('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):', {
        reply_markup: getCategoriesInlineKeyboard()
    });
    let categoryId;
    let categoryName;
    while (true) {
        const categoryCtx = await conversation.wait();
 
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (categoryCtx.callbackQuery) {
            const data = categoryCtx.callbackQuery.data;  
            console.log(data);
            if (data.startsWith('select_category:')) {
                categoryId = parseInt(data.split(':')[1]);  
                console.log(categoryId);  
                const category = db.getProductCategoryById(categoryId);
                categoryName = category.name;
                await categoryCtx.answerCallbackQuery(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
                break;
            } else if (data === 'cancel_add_product') {
                await categoryCtx.answerCallbackQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                return;
            }
        } else if (categoryCtx.message && isCancelText(categoryCtx.message.text)) {
            await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return;
        }
     
    }   

    
    await ctx.reply('üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç", –ª–∏–±–æ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const imageUrl = await conversation.wait();
    if (imageUrl.message && isCancelText(imageUrl.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    
    await ctx.reply('üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const stockMsg = await conversation.wait();
    if (stockMsg.message && isCancelText(stockMsg.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    const stock = parseInt(stockMsg.message.text);

    if (isNaN(stock)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ)');
        return;
    } 

    try {
        const productData = {
            name: name.message.text,
            description: description.message.text,
            price: price,
            category_id: categoryId,
            image_url: imageUrl.message.text.toLowerCase() === '–Ω–µ—Ç' ? null : imageUrl.message.text,
            stock: stock
        };

        const productId = db.addProduct(productData);
 
        await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: ${productId}`, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]] }
    })
    } catch (error) {
        console.error('Error adding product:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

export async function addProductCategory(conversation, ctx) {
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):');
    const name = await conversation.wait();
    if (name.message && isCancelText(name.message.text)) {
        await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    
   
    try {
        const categoryData = {
            name: name.message.text           
        };

        const categoryId = db.addProductCategory(categoryData);

          await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: ${categoryId}`, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]] }
    })
    } catch (error) {
        console.error('Error adding category:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');

    }
}

export async function getContactInfo(conversation, ctx) {
    await ctx.reply('üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    const phoneMsg = await conversation.wait();
    const phone = phoneMsg.message.text;
    
    await ctx.reply('üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:');
    const nameMsg = await conversation.wait();
    const fullName = nameMsg.message.text;
    
    db.updateUserContact(ctx.from.id, phone, fullName);
    
    await ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é)
    await checkoutFromCart(conversation, ctx);
}

export async function checkoutFromCart(conversation, ctx) {
    const user = db.getUser(ctx.from.id);
    const cartItems = db.getCart(user.id);

    if (!cartItems || cartItems.length === 0) {
        await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
    }

    const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    await ctx.reply('üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? (–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç")');

    const commentMsg = await conversation.wait();
    const userComment = commentMsg.message.text && commentMsg.message.text.toLowerCase() === '–Ω–µ—Ç' ? '' : commentMsg.message.text;

    try {
        const orderId = db.createOrder(user.id, cartItems, totalAmount, userComment);
        db.clearCart(user.id);

        await ctx.reply(
            `‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n` +
            `üíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${config.ORDER_STATUSES.CREATED}`
        );

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for (const adminId of config.ADMIN_IDS) {
            await ctx.api.sendMessage(
                adminId,
                `üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}\nüíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\nüë§ –ö–ª–∏–µ–Ω—Ç: ${ctx.from.first_name}`
            );
        }
    } catch (error) {
        console.error('Error creating order:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
}

export async function editProduct(conversation, ctx) {
    let productId = (conversation.session && conversation.session.editingProductId) || (ctx.session && ctx.session.editingProductId);
    if (!productId && ctx.callbackQuery && ctx.callbackQuery.data) {
        const m = ctx.callbackQuery.data.match(/^admin_edit_product:(\d+)/);
        if (m) productId = parseInt(m[1]);
    }
    if (!productId) {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        const idMsg = await conversation.wait();
        const parsed = parseInt(idMsg.message.text);
        if (Number.isNaN(parsed)) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
            return;
        }
        productId = parsed;
    }
    conversation.session = conversation.session || {};
    conversation.session.editingProductId = productId;

    const product = db.getAllProducts().find(p => p.id === productId) || db.getProductById(productId);
    if (!product) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):');
    const nameMsg = await conversation.wait();
    const newName = nameMsg.message.text.trim();

    await ctx.reply('üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const descMsg = await conversation.wait();
    const newDesc = descMsg.message.text.trim();

    await ctx.reply('üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ (—á–∏—Å–ª–æ, –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const priceMsg = await conversation.wait();
    const priceText = priceMsg.message.text.trim();

    await ctx.reply('üìÇ –ù–æ–≤—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–∏—Å–ª–æ, –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const catMsg = await conversation.wait();
    const catText = catMsg.message.text.trim();

    await ctx.reply('üñºÔ∏è –ù–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const imgMsg = await conversation.wait();
    const imgText = imgMsg.message.text.trim();

    await ctx.reply('üì¶ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (—á–∏—Å–ª–æ, –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const stockMsg = await conversation.wait();
    const stockText = stockMsg.message.text.trim();

    await ctx.reply('üü¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (1/0, –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    const availMsg = await conversation.wait();
    const availText = availMsg.message.text.trim();

    const updated = {
        name: newName === '-' ? product.name : newName,
        description: newDesc === '-' ? product.description : newDesc,
        price: priceText === '-' ? product.price : parseFloat(priceText),
        category_id: catText === '-' ? product.category_id : parseInt(catText),
        image_url: imgText === '-' ? product.image_url : imgText,
        stock: stockText === '-' ? product.stock : parseInt(stockText),
        is_available: availText === '-' ? product.is_available : parseInt(availText)
    };

    if (
        (priceText !== '-' && Number.isNaN(updated.price)) ||
        (catText !== '-' && Number.isNaN(updated.category_id)) ||
        (stockText !== '-' && Number.isNaN(updated.stock))
    ) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    console.log('updated', updated);
    try {
        db.stmts.updateProduct.run(
            updated.name,
            updated.description,
            updated.price,
            updated.category_id,
            updated.image_url,
            updated.stock,
            updated.is_available,
            productId
        );
        await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
        console.error('Error updating product:', e);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

export async function editCategory(conversation, ctx) {
    let categoryId = (conversation.session && conversation.session.editingCategoryId) || (ctx.session && ctx.session.editingCategoryId);
    if (!categoryId && ctx.callbackQuery && ctx.callbackQuery.data) {
        const m = ctx.callbackQuery.data.match(/^admin_edit_category:(\d+)/);
        if (m) categoryId = parseInt(m[1]);
    }
    if (!categoryId) {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        const idMsg = await conversation.wait();
        const parsed = parseInt(idMsg.message.text);
        if (Number.isNaN(parsed)) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
            return;
        }
        categoryId = parsed;
    }
    conversation.session = conversation.session || {};
    conversation.session.editingCategoryId = categoryId;

    const category = db.getProductCategoryById(categoryId);
    if (!category) {
        await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    await ctx.reply(`–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${category.name}"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã):`);
    const nameMsg = await conversation.wait();
    if (nameMsg.message && isCancelText(nameMsg.message.text)) {
        await ctx.reply('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }
    const newName = nameMsg.message.text.trim();
    if (!newName) {
        await ctx.reply('‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const changed = db.updateProductCategory(categoryId, newName);
        if (changed > 0) {
            await ctx.reply('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        }
    } catch (e) {
        console.error('Error updating category:', e);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
}

export async function updateOrderStatus(conversation, ctx) {
    // Safely get editingOrder from session or conversation, or parse from callback data
    let editingOrder = (ctx.session && ctx.session.editingOrder) || (conversation.session && conversation.session.editingOrder);

    if (!editingOrder || !editingOrder.orderId || !editingOrder.status) {
        if (ctx.callbackQuery && ctx.callbackQuery.data) {
            const m = ctx.callbackQuery.data.match(/^admin_set_status:(\d+):([a-zA-Z_]+)/);
            if (m) {
                editingOrder = { orderId: parseInt(m[1]), status: m[2] };
            }
        }
    }

    if (!editingOrder || !editingOrder.orderId || !editingOrder.status) {
        // Fallback prompt
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:');
        const idMsg = await conversation.wait();
        const parsedId = parseInt(idMsg.message?.text || '');
        if (Number.isNaN(parsedId)) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
            return;
        }
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (created | accepted | completed | rejected):');
        const stMsg = await conversation.wait();
        const statusText = (stMsg.message?.text || '').trim().toLowerCase();
        editingOrder = { orderId: parsedId, status: statusText };
    }

    // Persist for future steps
    ctx.session = ctx.session || {};
    conversation.session = conversation.session || {};
    ctx.session.editingOrder = editingOrder;
    conversation.session.editingOrder = editingOrder;

    const { orderId, status } = editingOrder;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}":`);
    const commentMsg = await conversation.wait();
    const adminComment = commentMsg.message.text;

    db.updateOrderStatus(orderId, status, adminComment);

    await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const order = db.getOrderById(orderId);
    if (order) {
        const user = db.getUser(order.user_id);
        if (user) {
            try {
                await ctx.api.sendMessage(
                    user.telegram_id,
                    `üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminComment}`
                );
            } catch (error) {
                console.error('Error notifying user:', error);
            }
        }
    }
}