import db from '../database.js';
import config from '../config.js';
import { getCategoriesInlineKeyboard } from '../keyboards/categories.js';

export async function addProduct(conversation, ctx) {
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
    const name = await conversation.wait();
    
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
    const description = await conversation.wait();
    
    await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
    const priceMsg = await conversation.wait();
    const price = parseFloat(priceMsg.message.text);
    
    if (isNaN(price)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)');
        return;
    }

    await ctx.reply('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:', {
        reply_markup: getCategoriesInlineKeyboard()
    });
    let categoryId;
    let categoryName;
    while (true) {
        const categoryCtx = await conversation.wait();
 
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (categoryCtx.callbackQuery) {
            const data = categoryCtx.callbackQuery.data;  
            console.log(data);
            if (data.startsWith('select_category:')) {
                categoryId = parseInt(data.split(':')[1]);  
                console.log(categoryId);  
                const category = db.getProductCategoryById(categoryId);
                categoryName = category.name;
                await categoryCtx.answerCallbackQuery(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
                break;
            } else if (data === 'cancel_add_product') {
                await categoryCtx.answerCallbackQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                return;
            }
        } 
     
    }   

    
    await ctx.reply('üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç"):');
    const imageUrl = await conversation.wait();
    
    await ctx.reply('üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
    const stockMsg = await conversation.wait();
    const stock = parseInt(stockMsg.message.text);

    if (isNaN(stock)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ)');
        return;
    } 

    try {
        const productData = {
            name: name.message.text,
            description: description.message.text,
            price: price,
            category_id: categoryId,
            image_url: imageUrl.message.text.toLowerCase() === '–Ω–µ—Ç' ? null : imageUrl.message.text,
            stock: stock
        };

        const productId = db.addProduct(productData);
 
        await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: ${productId}`, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]] }
    })
    } catch (error) {
        console.error('Error adding product:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

export async function addProductCategory(conversation, ctx) {
    await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    const name = await conversation.wait();
    
   
    try {
        const categoryData = {
            name: name.message.text           
        };

        const categoryId = db.addProductCategory(categoryData);

          await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: ${categoryId}`, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'admin_menu' }]] }
    })
    } catch (error) {
        console.error('Error adding category:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');

    }
}

export async function getContactInfo(conversation, ctx) {
    await ctx.reply('üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    const phoneMsg = await conversation.wait();
    const phone = phoneMsg.message.text;
    
    await ctx.reply('üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:');
    const nameMsg = await conversation.wait();
    const fullName = nameMsg.message.text;
    
    db.updateUserContact(ctx.from.id, phone, fullName);
    
    await ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const user = db.getUser(ctx.from.id);
    const cartItems = ctx.session.cartItems || [];
    const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    await createOrder(conversation, ctx, user.id, cartItems, totalAmount);
}

async function createOrder(conversation, ctx, userId, cartItems, totalAmount) {
    await ctx.reply('üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? (–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç")');
    
    const commentMsg = await conversation.wait();
    const userComment = commentMsg.message.text.toLowerCase() === '–Ω–µ—Ç' ? '' : commentMsg.message.text;
    
    try {
        const orderId = db.createOrder(userId, cartItems, totalAmount, userComment);
        db.clearCart(userId);
        
        await ctx.reply(
            `‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n` +
            `üíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${config.ORDER_STATUSES.CREATED}`
        );
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for (const adminId of config.ADMIN_IDS) {
            await ctx.api.sendMessage(
                adminId,
                `üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}\nüíµ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\nüë§ –ö–ª–∏–µ–Ω—Ç: ${ctx.from.first_name}`
            );
        }
    } catch (error) {
        console.error('Error creating order:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
}

export async function updateOrderStatus(conversation, ctx) {
    const { orderId, status } = ctx.session.editingOrder;
    
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}":`);
    const commentMsg = await conversation.wait();
    const adminComment = commentMsg.message.text;
    
    db.updateOrderStatus(orderId, status, adminComment);
    
    await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const order = db.getOrderById(orderId);
    if (order) {
        const user = db.getUser(order.user_id);
        if (user) {
            try {
                await ctx.api.sendMessage(
                    user.telegram_id,
                    `üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminComment}`
                );
            } catch (error) {
                console.error('Error notifying user:', error);
            }
        }
    }
}